package factoryPattern;

//简单工厂变为抽象工厂
//抽象工厂模式特别适合于这样的一种产品结构：产品分为几个系列，在每个系列中，产品的布局都是类似的，
//在一个系列中某个位置的产品，在另一个系列中一定有一个对应的产品。
//这样的产品结构是存在的，这几个系列中同一位置的产品可能是互斥的，它们是针对不同客户的解决方案，每个客户都只选择其一。
/**
*产品等级结构：比如一个抽象类是食物，其子类有苹果、牛奶等等，则抽象食物与具体食物名称之间构成了一个产品等级结构。
*	食物是抽象的父类，而具体的食物名称是其子类。
*产品族：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品。
*	如 AKitchen 生产的苹果、刀子，苹果属于食物产品等级结构中，而刀子则属于餐具产品等级结构中。
*因此工厂方法模式、抽象工厂模式最大的区别在于：
*	工厂方法模式：针对的是 一个产品等级结构。
*	抽象工厂模式：针对 多个产品等级结构。
*/
interface AbsCameraFactory{
	public abstract Camera getCameras(String brand);
}
